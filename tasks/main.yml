---
# Install
- name: Ensure snapd is installed
  package:
    name: snapd
    state: present

- name: Ensure microk8s is installed
  community.general.snap:
    name: microk8s
    channel: "{{ microk8s_version }}"
    classic: true

- name: Wait for microk8s to be ready
  command: |
    microk8s.status --wait-ready
  changed_when: false

  # Command Alias
- name: Determine whether or not the kubectl alias is configured
  command: |
    snap aliases
  register: _microk8s_snap_aliases
  changed_when: false

- name: Ensure the kubectl alias exists
  command: |
    snap alias microk8s.kubectl kubectl
  when: microk8s_alias_kubectl and not _microk8s_snap_aliases.stdout | regex_search('\nmicrok8s.kubectl\s+kubectl')

- name: Remove kubectl alias
  command: |
    snap unalias kubectl
  when: not microk8s_alias_kubectl and _microk8s_snap_aliases.stdout | regex_search('\nmicrok8s.kubectl\s+kubectl')

# Plugins
- name: Define the current status of the microk8s plugins
  command: |
    microk8s status --format yaml
  register: _microk8s_current_plugins
  changed_when: false

- name: Define lists of the names of enabled and disabled microk8s plugins
  set_fact:
    _microk8s_enabled_plugins: "{{ _microk8s_current_plugins.stdout | from_yaml | json_query('addons[?status==`enabled`].name') }}"
    _microk8s_disabled_plugins: "{{ _microk8s_current_plugins.stdout | from_yaml | json_query('addons[?status==`disabled`].name') }}"

- name: Ensure no microk8s plugins are enabled that shouldn't be
  command: |
    microk8s.disable {{ item }} --force
  with_items: "{{ _microk8s_enabled_plugins | difference(microk8s_plugins | json_query('[].name')) }}"

- name: Ensure microk8s plugins are enabled that should be
  command: |
    microk8s.enable {{ microk8s_plugins | json_query('[?name==`'+item+'`].name | [0]') }}:{{ microk8s_plugins | json_query('[?name==`'+item+'`].args | [0]') }}
  with_items: "{{ _microk8s_disabled_plugins | intersect(microk8s_plugins | json_query('[].name')) }}"

# Remote access
- name: Ensure the host domain is configured in microk8s
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    regexp: "^DNS.6 = .*"
    line: "DNS.6 = {{ ansible_fqdn }}"
    insertafter: '^\[ alt_names \]'

## Certificates
# - name: Ensure microk8s certificate folder exists
#   file:
#     path: /usr/share/ca-certificates/extra
#     state: directory

# - name: Ensure certificates are in place
#   copy:
#     src: "{{ item }}"
#     dest: /usr/share/ca-certificates/extra
#     remote_src: true
#     force: true
#   with_fileglob:
#     - /var/snap/microk8s/current/certs/*ca*.crt

# - name: Trust certificates generated by microk8s
#   command: |
#     update-ca-certificates
